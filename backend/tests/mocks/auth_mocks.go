// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "project/backend/models"
	auth "project/backend/types/auth"
	claims "project/backend/types/claims"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateEmailChangeToken mocks base method.
func (m *MockService) GenerateEmailChangeToken(user *models.User, newEmail string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailChangeToken", user, newEmail)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmailChangeToken indicates an expected call of GenerateEmailChangeToken.
func (mr *MockServiceMockRecorder) GenerateEmailChangeToken(user, newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailChangeToken", reflect.TypeOf((*MockService)(nil).GenerateEmailChangeToken), user, newEmail)
}

// GenerateEmailVerificationToken mocks base method.
func (m *MockService) GenerateEmailVerificationToken(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailVerificationToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmailVerificationToken indicates an expected call of GenerateEmailVerificationToken.
func (mr *MockServiceMockRecorder) GenerateEmailVerificationToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailVerificationToken", reflect.TypeOf((*MockService)(nil).GenerateEmailVerificationToken), ctx, userID)
}

// GenerateTokenPair mocks base method.
func (m *MockService) GenerateTokenPair(ctx context.Context, userID, role, deviceID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", ctx, userID, role, deviceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockServiceMockRecorder) GenerateTokenPair(ctx, userID, role, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockService)(nil).GenerateTokenPair), ctx, userID, role, deviceID)
}

// GetUserByEmail mocks base method.
func (m *MockService) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockServiceMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockService)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(ctx context.Context, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), ctx, userID)
}

// HandleOAuthLogin mocks base method.
func (m *MockService) HandleOAuthLogin(ctx context.Context, userInfo *auth.OAuthUserInfo) (*auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOAuthLogin", ctx, userInfo)
	ret0, _ := ret[0].(*auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleOAuthLogin indicates an expected call of HandleOAuthLogin.
func (mr *MockServiceMockRecorder) HandleOAuthLogin(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOAuthLogin", reflect.TypeOf((*MockService)(nil).HandleOAuthLogin), ctx, userInfo)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, req *auth.LoginRequest) (*auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, req)
}

// RefreshToken mocks base method.
func (m *MockService) RefreshToken(ctx context.Context, refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceMockRecorder) RefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockService)(nil).RefreshToken), ctx, refreshToken)
}

// RevokeTokens mocks base method.
func (m *MockService) RevokeTokens(ctx context.Context, userID, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokens", ctx, userID, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokens indicates an expected call of RevokeTokens.
func (mr *MockServiceMockRecorder) RevokeTokens(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokens", reflect.TypeOf((*MockService)(nil).RevokeTokens), ctx, userID, deviceID)
}

// SendVerificationEmail mocks base method.
func (m *MockService) SendVerificationEmail(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockServiceMockRecorder) SendVerificationEmail(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockService)(nil).SendVerificationEmail), ctx, userID)
}

// ValidateEmailPassword mocks base method.
func (m *MockService) ValidateEmailPassword(ctx context.Context, email, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEmailPassword", ctx, email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateEmailPassword indicates an expected call of ValidateEmailPassword.
func (mr *MockServiceMockRecorder) ValidateEmailPassword(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEmailPassword", reflect.TypeOf((*MockService)(nil).ValidateEmailPassword), ctx, email, password)
}

// VerifyEmail mocks base method.
func (m *MockService) VerifyEmail(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockServiceMockRecorder) VerifyEmail(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockService)(nil).VerifyEmail), ctx, token)
}

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateTokenPair mocks base method.
func (m *MockTokenGenerator) GenerateTokenPair(userID, role, deviceID string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", userID, role, deviceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockTokenGeneratorMockRecorder) GenerateTokenPair(userID, role, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateTokenPair), userID, role, deviceID)
}

// RevokeTokens mocks base method.
func (m *MockTokenGenerator) RevokeTokens(userID, deviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokens", userID, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokens indicates an expected call of RevokeTokens.
func (mr *MockTokenGeneratorMockRecorder) RevokeTokens(userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokens", reflect.TypeOf((*MockTokenGenerator)(nil).RevokeTokens), userID, deviceID)
}

// ValidateRefreshToken mocks base method.
func (m *MockTokenGenerator) ValidateRefreshToken(token string) (*claims.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", token)
	ret0, _ := ret[0].(*claims.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockTokenGeneratorMockRecorder) ValidateRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockTokenGenerator)(nil).ValidateRefreshToken), token)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendVerificationEmail mocks base method.
func (m *MockEmailSender) SendVerificationEmail(to, username, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", to, username, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockEmailSenderMockRecorder) SendVerificationEmail(to, username, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockEmailSender)(nil).SendVerificationEmail), to, username, token)
}

// MockOAuthProvider is a mock of OAuthProvider interface.
type MockOAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderMockRecorder
}

// MockOAuthProviderMockRecorder is the mock recorder for MockOAuthProvider.
type MockOAuthProviderMockRecorder struct {
	mock *MockOAuthProvider
}

// NewMockOAuthProvider creates a new mock instance.
func NewMockOAuthProvider(ctrl *gomock.Controller) *MockOAuthProvider {
	mock := &MockOAuthProvider{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProvider) EXPECT() *MockOAuthProviderMockRecorder {
	return m.recorder
}

// ExchangeCode mocks base method.
func (m *MockOAuthProvider) ExchangeCode(ctx context.Context, code string) (*auth.OAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCode", ctx, code)
	ret0, _ := ret[0].(*auth.OAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCode indicates an expected call of ExchangeCode.
func (mr *MockOAuthProviderMockRecorder) ExchangeCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCode", reflect.TypeOf((*MockOAuthProvider)(nil).ExchangeCode), ctx, code)
}

// GetUserInfo mocks base method.
func (m *MockOAuthProvider) GetUserInfo(ctx context.Context, token *auth.OAuthToken) (*auth.OAuthUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, token)
	ret0, _ := ret[0].(*auth.OAuthUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockOAuthProviderMockRecorder) GetUserInfo(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockOAuthProvider)(nil).GetUserInfo), ctx, token)
}
